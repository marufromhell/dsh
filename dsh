@click.command()
@click.option('-p', '--port', default='0', show_default=True, help='Serial port number')
@click.argument('script')
def main(port, script):
    # Add script directory to Python path
    script_dir = os.path.dirname(os.path.abspath(script))
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)

    with open(script, "r", encoding="utf-8") as file:
        contents = file.read()

    ser = serial.Serial(f"/dev/ttyACM{port}", 115200, timeout=1)
    ser.write(b'\n\r')
    click.echo("connected to: " + ser.portstr)
    def runjs(file_path, destinationname):
        with open(file_path, "rb") as file:
            file_data = file.read()
        
        # Send storage write command and wait for response
        ser.write(f"storage write /dsh_scripts/{destinationname}\n\r".encode())
        ser.readline()  # Read the echo of our command
        
        # Write file data and add final newline
        ser.write(file_data)
        ser.write(b'\n\r')
        
        # Wait for write completion
        response = ser.readline()
        print(f"Uploaded {file_path} to /dsh_scripts/{destinationname}")
    
    in_block = False
    block_lines = []
    local_vars = {}
    for line in contents.splitlines():
        stripped = line.strip()
        if not in_block and stripped.startswith("{") and not stripped.endswith("}"):
            in_block = True
            block_lines = [stripped.lstrip("{")]
            continue
        elif in_block:
            if stripped.endswith("}"):
                block_lines.append(stripped.rstrip("}"))
                code = "\n".join(block_lines)
                print("EXECUTING BLOCK:\n", code)  # Debug print
                exec(code, {}, local_vars)
                in_block = False
                block_lines = []
            else:
                block_lines.append(line)
            continue
        elif stripped.startswith("{") and stripped.endswith("}"):
            code = stripped[1:-1]
            exec(code, {}, local_vars)
            continue
        elif line.startswith("js_upload"):
            parts = line.split()
            if len(parts) == 3:
                file_path = parts[1]
                destinationname = parts[2]
                runjs(file_path, destinationname)
                continue
            
        def repl(match):
            expr = match.group(1)
            try:
                return str(eval(expr, {}, local_vars))
            except Exception as e:
                return f"<ERR:{e}>"

        processed_line = re.sub(r'\{([^{}]+)\}', repl, line)
        ser.write(processed_line.encode('utf-8') + b'\n\r')
        click.echo(ser.readline())
