#!/usr/bin/env python3
import serial
import click
import re
import sys
import os

"""
Flipper Zero shell script runner
email: maru@lithium-dev.xyz
signal: maru.222
BTC: 16innLYQtz123HTwNLY3vScPmEVP7tob8u
ETH: 0x48994D78B7090367Aa20FD5470baDceec42cAF62 
XMR: 49dNpgP5QSpPDF1YUVuU3ST2tUWng32m8crGQ4NuM6U44CG1ennTvESWbwK6epkfJ6LuAKYjSDKqKNtbtJnU71gi6GrF4Wh
"""

def extract_code_blocks(text):
    """Extract code blocks within curly braces."""
    pattern = r'\{([^{}]*)\}'
    return re.findall(pattern, text)

@click.command()
@click.option('-p', '--port', default='0', show_default=True, help='Serial port number')
@click.argument('script')
def main(port, script):
    # Add script directory to Python path
    script_dir = os.path.dirname(os.path.abspath(script))
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)

    with open(script, "r", encoding="utf-8") as file:
        contents = file.read()

    ser = serial.Serial(f"/dev/ttyACM{port}", 115200, timeout=1)
    ser.write(b'\n\r')
    click.echo("connected to: " + ser.portstr)
    def upload(file_path_local, destination_remote):
        # Ensure destination path starts with /ext
        if not destination_remote.startswith('/ext'):
            destination_remote = f'/ext{destination_remote}'
        
        with open(file_path_local, "r") as file:  # Changed to text mode
            file_data = file.read()
        
        # Ensure file ends with newline
        if not file_data.endswith('\n'):
            file_data += '\n'
        
        # Send storage write command
        ser.write(f"storage write {destination_remote}".encode())
        ser.write(b'\x0D\x0A')  # Ctrl+Enter
        ser.readline()  # Read the echo of our command
        
        # Write file data with proper line endings
        ser.write(file_data.encode().replace(b'\n', b'\x0D\x0A'))
        
        # Send Ctrl+C (ASCII code 0x03) to end write mode
        ser.write(b'\x03')
        ser.write(b'\x0D\x0A')  # Ctrl+Enter
        
        # Wait for write completion
        response = ser.readline().decode('utf-8').strip()
        if "error" in response.lower():
            print(f"Upload failed: {response}")
        else:
            print(f"Uploaded {file_path_local} to {destination_remote}")

    in_block = False
    block_lines = []
    local_vars = {}
    for line in contents.splitlines():
        stripped = line.strip()
        if not in_block and stripped.startswith("{") and not stripped.endswith("}"):
            in_block = True
            block_lines = [stripped.lstrip("{")]
            continue
        elif in_block:
            if stripped.endswith("}"):
                block_lines.append(stripped.rstrip("}"))
                code = "\n".join(block_lines)
                print("EXECUTING BLOCK:\n", code)  # Debug print
                exec(code, {}, local_vars)
                in_block = False
                block_lines = []
            else:
                block_lines.append(line)
            continue
        elif stripped.startswith("{") and stripped.endswith("}"):
            code = stripped[1:-1]
            exec(code, {}, local_vars)
            continue
        elif line.startswith("upload"):
            parts = line.split()
            if len(parts) == 3:
                file_path = parts[1]
                destinationname = parts[2]
                upload(file_path, destinationname)
                continue
        elif line.startswith("js"):
            parts = line.split()
            if len(parts) == 2:
                js_path = parts[1]
                if not js_path.startswith('/ext'):
                    js_path = f'/ext{js_path}'
                ser.write(f"js {js_path}\n\r".encode())
                click.echo(ser.readline())
            continue
            
        def repl(match):
            expr = match.group(1)
            try:
                return str(eval(expr, {}, local_vars))
            except Exception as e:
                return f"<ERR:{e}>"

        processed_line = re.sub(r'\{([^{}]+)\}', repl, line)
        ser.write(processed_line.encode('utf-8') + b'\n\r')
        click.echo(ser.readline())

if __name__ == '__main__':
    main()
